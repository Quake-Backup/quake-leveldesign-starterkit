inputs:
  ARTIFACT_FILENAME:
    required: true
  ARTIFACT_REPOSITORY:
    required: true
  CICD_OPERATING_SYSTEM_NAME:
    required: true
runs:
  using: composite
  steps:
    - name: Checkout the artifact repository files
      uses: ./.github/actions/_shared/checkout-artifact-repository-files
      with:
        ARTIFACT_REPOSITORY: ${{ inputs.ARTIFACT_REPOSITORY }}
    - name: Set the current commit HEAD SHA
      uses: ./.github/actions/_shared/set-current-commit-head-sha
      with:
        CICD_WORKING_DIRECTORY: working-directory/
    - name: Restore the artifact from cache
      id: restore-cached-artifact
      uses: ./.github/actions/_shared/restore-artifact-cache
      with:
        ARTIFACT_PATH: working-directory/${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}/
        CACHE_KEY: ${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}-${{ env.GIT_CURRENT_COMMIT_HEAD_SHA }}
    - name: Create the VCPKG caching directory
      if: steps.restore-cached-artifact.outputs.CACHE_HIT != 'true'
      working-directory: working-directory/
      run: mkdir -p ${{ github.workspace }}/vcpkg/bincache/
      shell: bash
    - name: Expose GitHub runtime
      if: steps.restore-cached-artifact.outputs.CACHE_HIT != 'true'
      uses: ./.github/actions/_shared/expose-github-runtime
    - name: Set specific environment variables
      if: steps.restore-cached-artifact.outputs.CACHE_HIT != 'true'
      working-directory: working-directory/
      run: |
        echo "TB_OS_IMAGE=${{ matrix.os }}" >> $GITHUB_ENV
        echo "TB_PULL_REQUEST_HEAD_SHA=${{ env.GIT_CURRENT_COMMIT_HEAD_SHA }}" >> $GITHUB_ENV
        echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $GITHUB_ENV
      shell: bash
    - name: Install dependencies
      if: steps.restore-cached-artifact.outputs.CACHE_HIT != 'true'
      working-directory: working-directory/
      run: |
        sudo apt update
        sudo apt install -y --no-install-recommends build-essential libxi-dev libxrandr-dev libxxf86vm-dev freeglut3-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libglm-dev pandoc ninja-build libglew-dev libfreeimage-dev libfreetype6-dev libtinyxml2-dev libassimp-dev libfuse2
      shell: bash
    - name: Install Qt
      if: steps.restore-cached-artifact.outputs.CACHE_HIT != 'true'
      uses: ./.github/actions/_shared/install-qt
      with:
        QT_VERSION: 6.7.0
    - name: Compile the source code
      if: steps.restore-cached-artifact.outputs.CACHE_HIT != 'true'
      working-directory: working-directory/
      run: ./CI-linux.sh
      shell: bash
    - name: Prepare the artifact
      if: steps.restore-cached-artifact.outputs.CACHE_HIT != 'true'
      working-directory: working-directory/
      run: |
        mkdir -p ${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}/
        mv cmakebuild/TrenchBroom-* ${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}/
      shell: bash
    - name: Save the artifact as cache
      if: steps.restore-cached-artifact.outputs.CACHE_HIT != 'true'
      uses: ./.github/actions/_shared/save-artifact-cache
      with:
        ARTIFACT_PATH: working-directory/${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}/
        CACHE_KEY: ${{ inputs.ARTIFACT_FILENAME }}-files-${{ inputs.CICD_OPERATING_SYSTEM_NAME }}-${{ env.GIT_CURRENT_COMMIT_HEAD_SHA }}
